pipeline {
    agent any 
    //environment{
      //  COSIGN_PASSWORD=credentials('cosign-password')
      //  COSIGN_PRIVATE_KEY=credentials('cosign-private-key')
      //  COSIGN_PUBLIC_KEY=credentials('cosign-public-key')
  //  }
        
    stages {
        stage('verification'){
            steps{
                withCredentials([file(credentialsId: 'cosign-public-key', variable: 'my_public_key')])
                {
                    sh "mkdir key"
                    sh "cp ${my_public_key} ./key/my_public_key.pub"
                    //sh "cp ${my_private_key} my_private_key.key"
                    sh "cat ./key/my_public_key.pub"
                    //sh "cat my_private_key.key"
                    sh "echo $my_public_key"
                    //sh "echo $my_private_key"
                }
                withCredentials([sshUserPrivateKey(credentialId: 'cosign-private-key-with-password', keyFileVariable: 'my_private_key')])
                {
                    sh "echo $my_private_key"
                    
                    sh "cp ${my_private_key} ./key/my_private_key.key"
                    sh "cat ./key/my_private_key.key"
                    
                }
            }
        }
        stage('authentication'){
            steps{
                sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 940810086075.dkr.ecr.us-east-1.amazonaws.com'
            }
        }
        stage('build') {
            steps {
                sh 'sam build'
            }
        }
        stage('package'){
            steps{
                sh 'sam package --output-template-file packaged-template.yaml --image-repository 940810086075.dkr.ecr.us-east-1.amazonaws.com/docker-lambda-testapp'
            }
        }
        stage('get image id'){
            steps{
                script{
                    def IMAGE_ID = sh(script: "grep -w ImageUri packaged-template.yaml | cut -d: -f3")
                    env.IMAGE_ID =IMAGE_ID
                }
            }
        }
        //stage('Qualys scan'){
            //steps{
                //getImageVulnsFromQualys useGlobalConfig:true, imageIds: '1cd246604ecc'//'sha256:a93a1f9ataf98ff31466d389920abe86aa030c924e418012b99e497ff93dc51f'
           // }
       // }
        stage('deploy'){
            steps {
                sh 'sam deploy --template-file /var/lib/jenkins/workspace/sam-demo/packaged-template.yaml --stack-name sam-app --no-confirm-changeset --no-fail-on-empty-changeset'// -t template.yaml --region us-east-1 --capabilities CAPABILITY_IAM --confirm-changeset true'// --resolve-image-repos' //940810086075.dkr.ecr.us-east-1.amazonaws.com/docker-lambda-testapp' --s3-bucket sam-jenkins-demo-us-west-2-subhayandpwc //--no-confirm-changeset --no-fail-on-empty-changeset'
            }
        }
        stage('sign the container image'){
            steps{
                sh 'cosign version'
                sh 'cosign sign --key my_private_key.key --upload=true 940810086075.dkr.ecr.us-east-1.amazonaws.com/docker-lambda-testapp'
            }
        }
        stage('verify the container image'){
            steps{
                sh 'cosign verify --key my_public_key.pub 940810086075.dkr.ecr.us-east-1.amazonaws.com/docker-lambda-testapp:lambdafunctionwithapi-1cd246604ecc-python3.7-v1'
            }
        }    
    }
}
